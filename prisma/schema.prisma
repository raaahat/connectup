// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  groupspaces GroupSpace[]
  members     Member[]
  zones       Zone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupSpace {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  ownerId String
  profile Profile @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members Member[]
  zones   Zone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId    String
  profile      Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  groupSpaceId String
  groupspace   GroupSpace @relation(fields: [groupSpaceId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@index([profileId])
  @@index([groupSpaceId])
}

enum ZoneType {
  TEXT
  AUDIO
  VIDEO
}

model Zone {
  id   String   @id @default(uuid())
  name String
  type ZoneType @default(TEXT)

  creatorId String
  profile   Profile @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  groupspaceId String
  groupspace   GroupSpace @relation(fields: [groupspaceId], references: [id], onDelete: Cascade)

  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([creatorId])
  @@index([groupspaceId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  zoneId String
  zone   Zone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([zoneId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
